{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/Documents/GitHub/openweathermap-weather-forecast/src/components/Inputs.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { UilSearch, UilLocationPoint } from '@iconscout/react-unicons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Inputs = _ref => {\n  _s();\n\n  let {\n    setQuery,\n    units,\n    setUnits\n  } = _ref;\n  const [city, setCity] = useState(\"\");\n\n  const handleUnitsChange = e => {\n    const selectedUnit = e.currentTarget.name;\n    if (units !== selectedUnit) setUnits(selectedUnit);\n  };\n\n  const handleSearchClick = () => {\n    if (city !== '') setQuery({\n      q: city\n    });\n  };\n\n  const handleLocationClick = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        let lat = position.coords.latitude;\n        let lon = position.coors.longitude;\n        setQuery({\n          lat,\n          lon\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: city,\n        onChange: e => setCity(e.currentTarget.value),\n        type: \"text\",\n        placeholder: \"Search for city...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UilSearch, {\n        onClick: handleSearchClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UilLocationPoint, {\n        onClick: handleLocationClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        name: \"metric\",\n        onClick: handleUnitsChange,\n        children: \"\\xB0C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"|\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        name: \"imperial\",\n        onClick: handleUnitsChange,\n        children: \"\\xB0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Inputs, \"NjhooW53FpaNk4X2HDZYlDFe0P4=\");\n\n_c = Inputs;\nexport default Inputs; // import { useState } from 'react'\n// import { UilSearch, UilLocationPoint } from '@iconscout/react-unicons'\n// const Inputs = ({ setQuery, units, setUnits }) => {\n//   const [city, setCity] = useState(\"\")\n//   const handleUnitsChange = (e) => {\n//     const selectedUnit = e.currentTarget.name\n//     if (units !== selectedUnit) setUnits(selectedUnit)\n//   }\n//   const handleSearchClick = () => {\n//     if (city !== '') setQuery({q: city})\n//   }\n//   const handleLocationClick = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition((position) => {\n//         let lat = position.coords.latitude;\n//         let lon = position.coors.longitude;\n//         setQuery({\n//           lat,\n//           lon\n//         })\n//       })\n//     }\n//   }\n//   return (\n//     <div>\n//       <div>\n//         <input \n//           value={city}\n//           onChange={(e) => setCity(e.currentTarget.value)}\n//           type=\"text\" \n//           placeholder=\"Search for city...\"\n//         />\n//         <UilSearch \n//         onClick={handleSearchClick}\n//         />\n//         <UilLocationPoint \n//         onClick={handleLocationClick}\n//         />\n//       </div>\n//       <div>\n//         <button\n//         name=\"metric\"\n//         onClick={handleUnitsChange}\n//         >°C</button>\n//         <p>|</p>\n//         <button\n//         name=\"imperial\"\n//         onClick={handleUnitsChange}\n//         >°F</button>\n//       </div>\n//     </div>\n//   )\n// }\n// export default Inputs\n\nvar _c;\n\n$RefreshReg$(_c, \"Inputs\");","map":{"version":3,"names":["useState","UilSearch","UilLocationPoint","Inputs","setQuery","units","setUnits","city","setCity","handleUnitsChange","e","selectedUnit","currentTarget","name","handleSearchClick","q","handleLocationClick","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","coors","longitude","value"],"sources":["/Users/mymac/Documents/GitHub/openweathermap-weather-forecast/src/components/Inputs.jsx"],"sourcesContent":["import { useState } from 'react'\nimport { UilSearch, UilLocationPoint } from '@iconscout/react-unicons'\n\nconst Inputs = ({ setQuery, units, setUnits }) => {\n  const [city, setCity] = useState(\"\")\n\n  const handleUnitsChange = (e) => {\n    const selectedUnit = e.currentTarget.name\n    if (units !== selectedUnit) setUnits(selectedUnit)\n  }\n\n  const handleSearchClick = () => {\n    if (city !== '') setQuery({q: city})\n  }\n\n  const handleLocationClick = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let lat = position.coords.latitude;\n        let lon = position.coors.longitude;\n\n        setQuery({\n          lat,\n          lon\n        })\n      })\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <input \n          value={city}\n          onChange={(e) => setCity(e.currentTarget.value)}\n          type=\"text\" \n          placeholder=\"Search for city...\"\n        />\n        <UilSearch \n        onClick={handleSearchClick}\n        />\n        <UilLocationPoint \n        onClick={handleLocationClick}\n        />\n      </div>\n      <div>\n        <button\n        name=\"metric\"\n        onClick={handleUnitsChange}\n        >°C</button>\n        <p>|</p>\n        <button\n        name=\"imperial\"\n        onClick={handleUnitsChange}\n        >°F</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Inputs\n\n\n\n\n// import { useState } from 'react'\n// import { UilSearch, UilLocationPoint } from '@iconscout/react-unicons'\n\n// const Inputs = ({ setQuery, units, setUnits }) => {\n//   const [city, setCity] = useState(\"\")\n\n//   const handleUnitsChange = (e) => {\n//     const selectedUnit = e.currentTarget.name\n//     if (units !== selectedUnit) setUnits(selectedUnit)\n//   }\n\n//   const handleSearchClick = () => {\n//     if (city !== '') setQuery({q: city})\n//   }\n\n//   const handleLocationClick = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition((position) => {\n//         let lat = position.coords.latitude;\n//         let lon = position.coors.longitude;\n\n//         setQuery({\n//           lat,\n//           lon\n//         })\n//       })\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <div>\n//         <input \n//           value={city}\n//           onChange={(e) => setCity(e.currentTarget.value)}\n//           type=\"text\" \n//           placeholder=\"Search for city...\"\n//         />\n//         <UilSearch \n//         onClick={handleSearchClick}\n//         />\n//         <UilLocationPoint \n//         onClick={handleLocationClick}\n//         />\n//       </div>\n//       <div>\n//         <button\n//         name=\"metric\"\n//         onClick={handleUnitsChange}\n//         >°C</button>\n//         <p>|</p>\n//         <button\n//         name=\"imperial\"\n//         onClick={handleUnitsChange}\n//         >°F</button>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Inputs"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,0BAA5C;;;AAEA,MAAMC,MAAM,GAAG,QAAmC;EAAA;;EAAA,IAAlC;IAAEC,QAAF;IAAYC,KAAZ;IAAmBC;EAAnB,CAAkC;EAChD,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;;EAEA,MAAMS,iBAAiB,GAAIC,CAAD,IAAO;IAC/B,MAAMC,YAAY,GAAGD,CAAC,CAACE,aAAF,CAAgBC,IAArC;IACA,IAAIR,KAAK,KAAKM,YAAd,EAA4BL,QAAQ,CAACK,YAAD,CAAR;EAC7B,CAHD;;EAKA,MAAMG,iBAAiB,GAAG,MAAM;IAC9B,IAAIP,IAAI,KAAK,EAAb,EAAiBH,QAAQ,CAAC;MAACW,CAAC,EAAER;IAAJ,CAAD,CAAR;EAClB,CAFD;;EAIA,MAAMS,mBAAmB,GAAG,MAAM;IAChC,IAAIC,SAAS,CAACC,WAAd,EAA2B;MACzBD,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;QACrD,IAAIC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B;QACA,IAAIC,GAAG,GAAGJ,QAAQ,CAACK,KAAT,CAAeC,SAAzB;QAEAtB,QAAQ,CAAC;UACPiB,GADO;UAEPG;QAFO,CAAD,CAAR;MAID,CARD;IASD;EACF,CAZD;;EAcA,oBACE;IAAA,wBACE;MAAA,wBACE;QACE,KAAK,EAAEjB,IADT;QAEE,QAAQ,EAAGG,CAAD,IAAOF,OAAO,CAACE,CAAC,CAACE,aAAF,CAAgBe,KAAjB,CAF1B;QAGE,IAAI,EAAC,MAHP;QAIE,WAAW,EAAC;MAJd;QAAA;QAAA;QAAA;MAAA,QADF,eAOE,QAAC,SAAD;QACA,OAAO,EAAEb;MADT;QAAA;QAAA;QAAA;MAAA,QAPF,eAUE,QAAC,gBAAD;QACA,OAAO,EAAEE;MADT;QAAA;QAAA;QAAA;MAAA,QAVF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAA,wBACE;QACA,IAAI,EAAC,QADL;QAEA,OAAO,EAAEP,iBAFT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAKE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALF,eAME;QACA,IAAI,EAAC,UADL;QAEA,OAAO,EAAEA,iBAFT;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANF;IAAA;MAAA;MAAA;MAAA;IAAA,QAfF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CAvDD;;GAAMN,M;;KAAAA,M;AAyDN,eAAeA,MAAf,C,CAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}