{"ast":null,"code":"import _slicedToArray from\"/Users/mymac/Documents/GitHub/openweathermap-weather-forecast/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import{UilSearch,UilLocationPoint}from'@iconscout/react-unicons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Inputs=function Inputs(_ref){var setQuery=_ref.setQuery,units=_ref.units,setUnits=_ref.setUnits;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),city=_useState2[0],setCity=_useState2[1];var handleUnitsChange=function handleUnitsChange(e){var selectedUnit=e.currentTarget.name;if(units!==selectedUnit)setUnits(selectedUnit);};var handleSearchClick=function handleSearchClick(){if(city!=='')setQuery({q:city});};var handleLocationClick=function handleLocationClick(){if(navigator.geolocation){navigator.geolocation.getCurrentPosition(function(position){var lat=position.coords.latitude;var lon=position.coors.longitude;setQuery({lat:lat,lon:lon});});}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{value:city,onChange:function onChange(e){return setCity(e.currentTarget.value);},type:\"text\",placeholder:\"Search for city...\"}),/*#__PURE__*/_jsx(UilSearch,{onClick:handleSearchClick}),/*#__PURE__*/_jsx(UilLocationPoint,{onClick:handleLocationClick})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{name:\"metric\",onClick:handleUnitsChange,children:\"\\xB0C\"}),/*#__PURE__*/_jsx(\"p\",{children:\"|\"}),/*#__PURE__*/_jsx(\"button\",{name:\"imperial\",onClick:handleUnitsChange,children:\"\\xB0F\"})]})]});};export default Inputs;// import { useState } from 'react'\n// import { UilSearch, UilLocationPoint } from '@iconscout/react-unicons'\n// const Inputs = ({ setQuery, units, setUnits }) => {\n//   const [city, setCity] = useState(\"\")\n//   const handleUnitsChange = (e) => {\n//     const selectedUnit = e.currentTarget.name\n//     if (units !== selectedUnit) setUnits(selectedUnit)\n//   }\n//   const handleSearchClick = () => {\n//     if (city !== '') setQuery({q: city})\n//   }\n//   const handleLocationClick = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition((position) => {\n//         let lat = position.coords.latitude;\n//         let lon = position.coors.longitude;\n//         setQuery({\n//           lat,\n//           lon\n//         })\n//       })\n//     }\n//   }\n//   return (\n//     <div>\n//       <div>\n//         <input \n//           value={city}\n//           onChange={(e) => setCity(e.currentTarget.value)}\n//           type=\"text\" \n//           placeholder=\"Search for city...\"\n//         />\n//         <UilSearch \n//         onClick={handleSearchClick}\n//         />\n//         <UilLocationPoint \n//         onClick={handleLocationClick}\n//         />\n//       </div>\n//       <div>\n//         <button\n//         name=\"metric\"\n//         onClick={handleUnitsChange}\n//         >°C</button>\n//         <p>|</p>\n//         <button\n//         name=\"imperial\"\n//         onClick={handleUnitsChange}\n//         >°F</button>\n//       </div>\n//     </div>\n//   )\n// }\n// export default Inputs","map":{"version":3,"names":["useState","UilSearch","UilLocationPoint","Inputs","setQuery","units","setUnits","city","setCity","handleUnitsChange","e","selectedUnit","currentTarget","name","handleSearchClick","q","handleLocationClick","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","coors","longitude","value"],"sources":["/Users/mymac/Documents/GitHub/openweathermap-weather-forecast/src/components/Inputs.jsx"],"sourcesContent":["import { useState } from 'react'\nimport { UilSearch, UilLocationPoint } from '@iconscout/react-unicons'\n\nconst Inputs = ({ setQuery, units, setUnits }) => {\n  const [city, setCity] = useState(\"\")\n\n  const handleUnitsChange = (e) => {\n    const selectedUnit = e.currentTarget.name\n    if (units !== selectedUnit) setUnits(selectedUnit)\n  }\n\n  const handleSearchClick = () => {\n    if (city !== '') setQuery({q: city})\n  }\n\n  const handleLocationClick = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let lat = position.coords.latitude;\n        let lon = position.coors.longitude;\n\n        setQuery({\n          lat,\n          lon\n        })\n      })\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <input \n          value={city}\n          onChange={(e) => setCity(e.currentTarget.value)}\n          type=\"text\" \n          placeholder=\"Search for city...\"\n        />\n        <UilSearch \n        onClick={handleSearchClick}\n        />\n        <UilLocationPoint \n        onClick={handleLocationClick}\n        />\n      </div>\n      <div>\n        <button\n        name=\"metric\"\n        onClick={handleUnitsChange}\n        >°C</button>\n        <p>|</p>\n        <button\n        name=\"imperial\"\n        onClick={handleUnitsChange}\n        >°F</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Inputs\n\n\n\n\n// import { useState } from 'react'\n// import { UilSearch, UilLocationPoint } from '@iconscout/react-unicons'\n\n// const Inputs = ({ setQuery, units, setUnits }) => {\n//   const [city, setCity] = useState(\"\")\n\n//   const handleUnitsChange = (e) => {\n//     const selectedUnit = e.currentTarget.name\n//     if (units !== selectedUnit) setUnits(selectedUnit)\n//   }\n\n//   const handleSearchClick = () => {\n//     if (city !== '') setQuery({q: city})\n//   }\n\n//   const handleLocationClick = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition((position) => {\n//         let lat = position.coords.latitude;\n//         let lon = position.coors.longitude;\n\n//         setQuery({\n//           lat,\n//           lon\n//         })\n//       })\n//     }\n//   }\n\n//   return (\n//     <div>\n//       <div>\n//         <input \n//           value={city}\n//           onChange={(e) => setCity(e.currentTarget.value)}\n//           type=\"text\" \n//           placeholder=\"Search for city...\"\n//         />\n//         <UilSearch \n//         onClick={handleSearchClick}\n//         />\n//         <UilLocationPoint \n//         onClick={handleLocationClick}\n//         />\n//       </div>\n//       <div>\n//         <button\n//         name=\"metric\"\n//         onClick={handleUnitsChange}\n//         >°C</button>\n//         <p>|</p>\n//         <button\n//         name=\"imperial\"\n//         onClick={handleUnitsChange}\n//         >°F</button>\n//       </div>\n//     </div>\n//   )\n// }\n\n// export default Inputs"],"mappings":"mJAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,SAAT,CAAoBC,gBAApB,KAA4C,0BAA5C,C,wFAEA,GAAMC,OAAM,CAAG,QAATA,OAAS,MAAmC,IAAhCC,SAAgC,MAAhCA,QAAgC,CAAtBC,KAAsB,MAAtBA,KAAsB,CAAfC,QAAe,MAAfA,QAAe,CAChD,cAAwBN,QAAQ,CAAC,EAAD,CAAhC,wCAAOO,IAAP,eAAaC,OAAb,eAEA,GAAMC,kBAAiB,CAAG,QAApBA,kBAAoB,CAACC,CAAD,CAAO,CAC/B,GAAMC,aAAY,CAAGD,CAAC,CAACE,aAAF,CAAgBC,IAArC,CACA,GAAIR,KAAK,GAAKM,YAAd,CAA4BL,QAAQ,CAACK,YAAD,CAAR,CAC7B,CAHD,CAKA,GAAMG,kBAAiB,CAAG,QAApBA,kBAAoB,EAAM,CAC9B,GAAIP,IAAI,GAAK,EAAb,CAAiBH,QAAQ,CAAC,CAACW,CAAC,CAAER,IAAJ,CAAD,CAAR,CAClB,CAFD,CAIA,GAAMS,oBAAmB,CAAG,QAAtBA,oBAAsB,EAAM,CAChC,GAAIC,SAAS,CAACC,WAAd,CAA2B,CACzBD,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,SAACC,QAAD,CAAc,CACrD,GAAIC,IAAG,CAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA1B,CACA,GAAIC,IAAG,CAAGJ,QAAQ,CAACK,KAAT,CAAeC,SAAzB,CAEAtB,QAAQ,CAAC,CACPiB,GAAG,CAAHA,GADO,CAEPG,GAAG,CAAHA,GAFO,CAAD,CAAR,CAID,CARD,EASD,CACF,CAZD,CAcA,mBACE,oCACE,oCACE,cACE,KAAK,CAAEjB,IADT,CAEE,QAAQ,CAAE,kBAACG,CAAD,QAAOF,QAAO,CAACE,CAAC,CAACE,aAAF,CAAgBe,KAAjB,CAAd,EAFZ,CAGE,IAAI,CAAC,MAHP,CAIE,WAAW,CAAC,oBAJd,EADF,cAOE,KAAC,SAAD,EACA,OAAO,CAAEb,iBADT,EAPF,cAUE,KAAC,gBAAD,EACA,OAAO,CAAEE,mBADT,EAVF,GADF,cAeE,oCACE,eACA,IAAI,CAAC,QADL,CAEA,OAAO,CAAEP,iBAFT,mBADF,cAKE,wBALF,cAME,eACA,IAAI,CAAC,UADL,CAEA,OAAO,CAAEA,iBAFT,mBANF,GAfF,GADF,CA6BD,CAvDD,CAyDA,cAAeN,OAAf,CAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}