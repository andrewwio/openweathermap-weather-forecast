{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\n\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\n\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 8).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 25).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n      temp: d.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\n\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData(\"onecall\", {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units\n  }).then(formatForecastWeather);\n  return { ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n};\n\nconst formatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\n\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode }; // import { DateTime } from \"luxon\";\n// const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n// const BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n// const getWeatherData = (infoType, searchParams) => {\n//   const url = new URL(BASE_URL + \"/\" + infoType);\n//   url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n//   return fetch(url).then((res) => res.json());\n// };\n// const formatCurrentWeather = (data) => {\n//   const {\n//     coord: { lat, lon },\n//     main: { temp, feels_like, temp_min, temp_max, humidity },\n//     name,\n//     dt,\n//     sys: { country, sunrise, sunset },\n//     weather,\n//     wind: { speed },\n//   } = data;\n//   const { main: details, icon } = weather[0];\n//   return {\n//     lat,\n//     lon,\n//     temp,\n//     feels_like,\n//     temp_min,\n//     temp_max,\n//     humidity,\n//     name,\n//     dt,\n//     country,\n//     sunrise,\n//     sunset,\n//     details,\n//     icon,\n//     speed,\n//   };\n// }\n// const formatForecastWeather = (data) => {\n//   let { timezone, daily, hourly } = data;\n//   daily = daily.slice(1, 8).map((d) => {\n//     return {\n//       title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n//       temp: d.temp.day,\n//       icon: d.weather[0].icon,\n//     };\n//   });\n//   hourly = hourly.slice(1, 25).map((d) => {\n//     return {\n//       title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n//       temp: d.temp,\n//       icon: d.weather[0].icon,\n//     };\n//   });\n//   return { timezone, daily, hourly };\n// };\n// const getFormattedWeatherData = async (searchParams) => {\n//   const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather)\n//   const { lat, lon } = formattedCurrentWeather;\n//   const formattedForecastWeather = await getWeatherData(\"onecall\", {\n//     lat,\n//     lon,\n//     exclude: \"current,minutely,alerts\",\n//     units: searchParams.units,\n//   }).then(formatForecastWeather);\n//   return { ...formattedCurrentWeather, ...formattedForecastWeather };\n// };\n// const formatToLocalTime = (\n//   secs,\n//   zone,\n//   format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n// ) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n// const iconUrlFromCode = (code) =>\n//   `http://openweathermap.org/img/wn/${code}@2x.png`;\n// export default getFormattedWeatherData\n// export { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","process","env","REACT_APP_WEATHER_API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat","iconUrlFromCode","code"],"sources":["/Users/mymac/Documents/GitHub/openweathermap-weather-forecast/src/services/weatherService.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n  };\n}\n\nconst formatForecastWeather = (data) => {\n  let { timezone, daily, hourly } = data;\n  daily = daily.slice(1, 8).map((d) => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n      temp: d.temp.day,\n      icon: d.weather[0].icon,\n    };\n  });\n\n  hourly = hourly.slice(1, 25).map((d) => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n      temp: d.temp,\n      icon: d.weather[0].icon,\n    };\n  });\n\n  return { timezone, daily, hourly };\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather)\n\n  const { lat, lon } = formattedCurrentWeather;\n\n  const formattedForecastWeather = await getWeatherData(\"onecall\", {\n    lat,\n    lon,\n    exclude: \"current,minutely,alerts\",\n    units: searchParams.units,\n  }).then(formatForecastWeather);\n\n  return { ...formattedCurrentWeather, ...formattedForecastWeather };\n};\n\n\nconst formatToLocalTime = (\n  secs,\n  zone,\n  format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst iconUrlFromCode = (code) =>\n  `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData\n\nexport { formatToLocalTime, iconUrlFromCode };\n\n\n\n// import { DateTime } from \"luxon\";\n\n// const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n// const BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\n// const getWeatherData = (infoType, searchParams) => {\n//   const url = new URL(BASE_URL + \"/\" + infoType);\n//   url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n//   return fetch(url).then((res) => res.json());\n// };\n\n// const formatCurrentWeather = (data) => {\n//   const {\n//     coord: { lat, lon },\n//     main: { temp, feels_like, temp_min, temp_max, humidity },\n//     name,\n//     dt,\n//     sys: { country, sunrise, sunset },\n//     weather,\n//     wind: { speed },\n//   } = data;\n\n//   const { main: details, icon } = weather[0];\n\n//   return {\n//     lat,\n//     lon,\n//     temp,\n//     feels_like,\n//     temp_min,\n//     temp_max,\n//     humidity,\n//     name,\n//     dt,\n//     country,\n//     sunrise,\n//     sunset,\n//     details,\n//     icon,\n//     speed,\n//   };\n// }\n\n// const formatForecastWeather = (data) => {\n//   let { timezone, daily, hourly } = data;\n//   daily = daily.slice(1, 8).map((d) => {\n//     return {\n//       title: formatToLocalTime(d.dt, timezone, \"ccc\"),\n//       temp: d.temp.day,\n//       icon: d.weather[0].icon,\n//     };\n//   });\n\n//   hourly = hourly.slice(1, 25).map((d) => {\n//     return {\n//       title: formatToLocalTime(d.dt, timezone, \"hh:mm a\"),\n//       temp: d.temp,\n//       icon: d.weather[0].icon,\n//     };\n//   });\n\n//   return { timezone, daily, hourly };\n// };\n\n// const getFormattedWeatherData = async (searchParams) => {\n//   const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather)\n\n//   const { lat, lon } = formattedCurrentWeather;\n\n//   const formattedForecastWeather = await getWeatherData(\"onecall\", {\n//     lat,\n//     lon,\n//     exclude: \"current,minutely,alerts\",\n//     units: searchParams.units,\n//   }).then(formatForecastWeather);\n\n//   return { ...formattedCurrentWeather, ...formattedForecastWeather };\n// };\n\n\n// const formatToLocalTime = (\n//   secs,\n//   zone,\n//   format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\"\n// ) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\n// const iconUrlFromCode = (code) =>\n//   `http://openweathermap.org/img/wn/${code}@2x.png`;\n\n// export default getFormattedWeatherData\n\n// export { formatToLocalTime, iconUrlFromCode };"],"mappings":"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"},"metadata":{},"sourceType":"module"}